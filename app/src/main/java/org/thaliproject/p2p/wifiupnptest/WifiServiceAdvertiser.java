// Copyright (c) Microsoft. All Rights Reserved. Licensed under the MIT License. See license.txt in the project root for further information.
package org.thaliproject.p2p.wifiupnptest;

import android.net.wifi.p2p.WifiP2pManager;
import android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo;
import android.net.wifi.p2p.nsd.WifiP2pServiceInfo;
import android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo;
import android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by juksilve on 28.2.2015.
 */
public class WifiServiceAdvertiser {

    private WifiP2pManager p2p;
    private WifiP2pManager.Channel channel;

    int lastError = -1;
    public WifiServiceAdvertiser(WifiP2pManager Manager, WifiP2pManager.Channel Channel) {
        this.p2p = Manager;
        this.channel = Channel;
    }

    public int GetLastError(){
        return lastError;
    }
    public void Start(String instance,String service_type) {

        /* @param uuid a string representation of this UUID in the following format,
         *  as per <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.<br>
         *  e.g) 6859dede-8574-59ab-9332-123456789012
         */

        String uuid = "6859dede-8574-59ab-9332-123456789088";
        /* @param device a string representation of this device in the following format,
         * as per
         * <a href="http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf">
         *  UPnP Device Architecture1.1</a><br>
         *  e.g) urn:schemas-upnp-org:device:MediaServer:1
         */

        String device = "urn:schemas-upnp-org:device:A";
        /* @param services a string representation of this service in the following format,
         * as per
         * <a href="http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf">
         *  UPnP Device Architecture1.1</a><br>
         *  e.g) urn:schemas-upnp-org:service:ContentDirectory:1
         * @return UPnP service information object.
         */

        List<String> services = new ArrayList<String>();

        // max that device shows rootdevice & UID string: 757
        // size = 58 : uuid:6859dede-8574-59ab-9332-123456789011::upnp:rootdevice
        // size = 41 : uuid:6859dede-8574-59ab-9332-123456789011
       // services.add("0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555");

        // max that device shows: 868
        // size = 72 : uuid:6859dede-8574-59ab-9332-123456789011::urn:schemas-upnp-org:device:A
       // services.add("0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666");

        //max that shows at all 946
        //services.add("0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122222222223333333333444444");
        //services.add("444444");


        // each one will be added 43 byte header: 'uuid:6859dede-8574-59ab-9332-123456789011::', thus we get only 6 through
     /*   services.add("000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999");
        services.add("111111111122222222223333333333444444444455555555556666666666777777777788888888889999999990000000000");
        services.add("222222222233333333334444444444555555555566666666667777777777888888888899999999900000000001111111111");
        services.add("333333333344444444445555555555666666666677777777778888888888999999999000000000011111111112222222222");
        services.add("444444444455555555556666666666777777777788888888889999999990000000000111111111122222222223333333333");
        services.add("555555555566666666667777777777888888888899999999900000000001111111111222222222233333333334444444444");
        services.add("666666666677777777778888888888999999999000000000011111111112222222222333333333344444444445555555555");
        services.add("777777777788888888889999999990000000000111111111122222222223333333333444444444455555555556666666666");
        services.add("888888888899999999900000000001111111111222222222233333333334444444444555555555566666666667777777777");
        services.add("999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
    */

       services.add("000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
       services.add("111111111122222222223333333333444444444455555555556666666666777777777788888888889999999990000000000000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("222222222233333333334444444444555555555566666666667777777777888888888899999999900000000001111111111000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("333333333344444444445555555555666666666677777777778888888888999999999000000000011111111112222222222000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
    /*    services.add("444444444455555555556666666666777777777788888888889999999990000000000111111111122222222223333333333000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("555555555566666666667777777777888888888899999999900000000001111111111222222222233333333334444444444000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888);
        services.add("666666666677777777778888888888999999999000000000011111111112222222222333333333344444444445555555555000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("777777777788888888889999999990000000000111111111122222222223333333333444444444455555555556666666666000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("888888888899999999900000000001111111111222222222233333333334444444444555555555566666666667777777777000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
        services.add("999999999000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888000000000011111111112222222222333333333344444444445555555555666666666677777777778888888888");
    */
        
        // create a new instance to advertise
        WifiP2pUpnpServiceInfo service =  WifiP2pUpnpServiceInfo.newInstance(uuid,device,services);

        p2p.addLocalService(channel, service, new WifiP2pManager.ActionListener() {
            public void onSuccess() {
                lastError = -1;
                debug_print("Added local service");
            }

            public void onFailure(int reason) {
                lastError = reason;
                debug_print("Adding local service failed, error code " + reason);
            }
        });
    }

    public void Stop() {
        p2p.clearLocalServices(channel, new WifiP2pManager.ActionListener() {
            public void onSuccess() {
                lastError = -1;
                debug_print("Cleared local services");
            }

            public void onFailure(int reason) {
                lastError = reason;
                debug_print("Clearing local services failed, error code " + reason);
            }
        });
    }

    private void debug_print(String buffer) {
        Log.i("ACCESS point", buffer);
    }
}
